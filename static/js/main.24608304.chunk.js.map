{"version":3,"sources":["redux/constants/action-types.js","redux/actions/themeActions.js","components/login/login.js","redux/actions/signUserActions.js","components/home/postList.js","components/home/home.js","components/home/homeInit.js","App.js","redux/reducers/themefunctions.js","reportWebVitals.js","redux/reducers/signUserReducer.js","redux/reducers/themeReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["ActionTypes","setDarkTheme","type","payload","setLightTheme","Login","dispatch","useDispatch","themedata","useSelector","state","themeState","responseGoogle","e","userData","googleId","profileObj","name","email","imageUrl","className","checked","theme","onClick","clientId","buttonText","onSuccess","onFailure","isSignedIn","cookiePolicy","PostList","onLogoutSuccess","Home","HomeInit","userState","stateLogIn","App","userPrefersDark","window","matchMedia","matches","localStorage","getItem","setItem","document","getElementsByTagName","setAttribute","setThemePage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","intialState","reducers","combineReducers","console","log","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.24608304.chunk.js","sourcesContent":["export const ActionTypes = {\r\n    SIGNIN_USER: \"SIGNIN_USER\",\r\n    SIGNOUT_USER: \"SIGNOUT_USER\",\r\n    THEME_DARK: \"THEME_DARK\",\r\n    THEME_LIGTH: \"THEME_LIGTH\"\r\n};\r\n","import { ActionTypes } from \"../constants/action-types\";\r\n\r\nexport const setDarkTheme = () => {\r\n    return {\r\n        type: ActionTypes.THEME_DARK,\r\n        payload: null,\r\n    };\r\n};\r\nexport const setLightTheme = () => {\r\n    return {\r\n        type: ActionTypes.THEME_LIGTH,\r\n        payload: null,\r\n    };\r\n};","import React from \"react\";\r\nimport \"./login.css\"\r\nimport GoogleLogin from \"react-google-login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signInUser} from \"../../redux/actions/signUserActions\";\r\nimport {setDarkTheme, setLightTheme} from \"../../redux/actions/themeActions\";\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  let themedata = useSelector((state)=>state.themeState);\r\n  const responseGoogle = (e)=>{\r\n    const userData={\r\n      googleId:e.profileObj.googleId,\r\n      name:e.profileObj.name,\r\n      email:e.profileObj.email,\r\n      imageUrl:e.profileObj.imageUrl\r\n    }\r\n    dispatch(signInUser(userData));\r\n  }\r\n  const checkTheme = () => {\r\n    themedata.theme === \"dark\"?\r\n        dispatch(setLightTheme())\r\n        :\r\n        dispatch(setDarkTheme())\r\n        ;\r\n  }\r\n  return <div className=\"div-login\">\r\n                <div className=\"login-div-check-theme\">\r\n                  <div className=\"login-div1-check-theme\">\r\n                    <input className=\"login-check-theme\" checked={themedata.theme === \"dark\"} type=\"checkbox\"/>\r\n                    <i onClick={()=>checkTheme()}><span>Dark Mode</span></i>\r\n                  </div>\r\n                </div>\r\n                    <section className=\"section-login\">\r\n                      <div className=\"div1-login\">\r\n                        <h1 className=\"h1-login\">Social Network - TITA MEDIA</h1>\r\n                        <GoogleLogin\r\n                            clientId=\"341846146220-8g6gupvq3en8g5q0n9u03kg3c5oe898r.apps.googleusercontent.com\"\r\n                            buttonText=\"Login with Google\"\r\n                            onSuccess={responseGoogle}\r\n                            onFailure={responseGoogle}\r\n                            isSignedIn={true}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                      </div>\r\n\r\n                    </section>\r\n          </div>\r\n}\r\n\r\nexport default Login","import { ActionTypes } from \"../constants/action-types\";\r\n\r\nexport const signInUser = (userState) => {\r\n    return {\r\n        type: ActionTypes.SIGNIN_USER,\r\n        payload: userState,\r\n    };\r\n};\r\nexport const signOutUser = () => {\r\n    return {\r\n        type: ActionTypes.SIGNOUT_USER,\r\n        payload: null,\r\n    };\r\n};","import React from \"react\";\r\nimport {GoogleLogout} from \"react-google-login\";\r\nimport {signOutUser} from \"../../redux/actions/signUserActions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst PostList = () => {\r\n  const dispatch = useDispatch();\r\n  const logout = ()=>{\r\n    dispatch(signOutUser());\r\n  }\r\n  return <>\r\n            <GoogleLogout\r\n                clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\r\n                buttonText=\"Logout\"\r\n                onLogoutSuccess={logout}\r\n            />\r\n        </>\r\n}\r\nexport default PostList","import React from \"react\";\r\nimport PostList from \"./postList\";\r\n\r\nconst Home = () => {\r\n  return <div>\r\n        <PostList/>\r\n        </div>\r\n}\r\nexport default Home","import React from \"react\";\r\nimport Login from \"../login/login\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Home from \"./home\";\r\n\r\nconst HomeInit = () => {\r\n    let userState = useSelector((state)=>state.userState);\r\n    return <>\r\n\r\n      {userState.stateLogIn?(\r\n          <Home/>\r\n      ):(\r\n          <Login/>\r\n      )}\r\n  </>\r\n}\r\nexport default HomeInit","import './App.css';\nimport HomeInit from \"./components/home/homeInit\";\nimport {useDispatch} from \"react-redux\";\nimport {setThemePage} from \"./redux/reducers/themefunctions\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    setThemePage(dispatch)\n  return (\n    <div>\n      <HomeInit/>\n    </div>\n  );\n}\n\nexport default App;\n","import {setDarkTheme, setLightTheme} from \"../actions/themeActions\";\r\n\r\nexport const setThemePage = (dispatch)=>{\r\n    const userPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    if (localStorage.getItem(\"theme\") === null) {\r\n        if(userPrefersDark){\r\n            localStorage.setItem(\"theme\", \"dark\");\r\n            document\r\n                .getElementsByTagName(\"HTML\")[0]\r\n                .setAttribute(\"data-theme\", 'dark');\r\n            dispatch(setDarkTheme())\r\n        }else{\r\n            localStorage.setItem(\"theme\", \"light\");\r\n            document\r\n                .getElementsByTagName(\"HTML\")[0]\r\n                .setAttribute(\"data-theme\", 'light');\r\n            dispatch(setLightTheme())\r\n        }\r\n    }else{\r\n        if(localStorage.getItem(\"theme\") === \"dark\"){\r\n            document\r\n                .getElementsByTagName(\"HTML\")[0]\r\n                .setAttribute(\"data-theme\", 'dark');\r\n            dispatch(setDarkTheme())\r\n        }else{\r\n            document\r\n                .getElementsByTagName(\"HTML\")[0]\r\n                .setAttribute(\"data-theme\", 'light');\r\n            dispatch(setLightTheme())\r\n        }\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ActionTypes } from \"../constants/action-types\";\r\n\r\n\r\nexport const intialState = {\r\n    stateLogIn:false,\r\n    googleId:\"\",\r\n    name:\"\",\r\n    email:\"\",\r\n    imageUrl:\"\"\r\n};\r\nexport const UserReducer = (state = intialState, { type, payload }) => {\r\n    switch (type) {\r\n        case ActionTypes.SIGNIN_USER:\r\n            payload = {...payload, stateLogIn: true}\r\n            console.log({payload});\r\n            return payload;\r\n        case ActionTypes.SIGNOUT_USER:\r\n            return intialState;\r\n        default:\r\n            return state;\r\n    }\r\n};","import {ActionTypes} from \"../constants/action-types\";\r\n\r\n\r\nexport const intialState = {\r\n    theme:'light'\r\n};\r\nexport const themeReducer = (state = intialState, { type, payload }) => {\r\n    switch (type) {\r\n        case ActionTypes.THEME_DARK:\r\n            localStorage.setItem(\"theme\", \"dark\");\r\n            document\r\n                .getElementsByTagName(\"HTML\")[0]\r\n                .setAttribute(\"data-theme\", 'dark');\r\n            return {\r\n                theme: 'dark'\r\n            };\r\n        case ActionTypes.THEME_LIGTH:\r\n            localStorage.setItem(\"theme\", \"light\");\r\n            document\r\n                .getElementsByTagName(\"HTML\")[0]\r\n                .setAttribute(\"data-theme\", 'light');\r\n            return {\r\n                theme: 'light'\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\nimport {UserReducer} from \"./signUserReducer\";\r\nimport {themeReducer} from \"./themeReducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    userState : UserReducer,\r\n    themeState : themeReducer\r\n});\r\nexport default reducers;","import { createStore } from \"redux\";\r\n\r\nimport reducers from \"./reducers/index\";\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    {},\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}